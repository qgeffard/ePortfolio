-- phpMyAdmin SQL Dump
-- version 3.4.10.1deb1
-- http://www.phpmyadmin.net
--
-- Client: localhost
-- Généré le : Mar 26 Février 2013 à 09:44
-- Version du serveur: 5.5.29
-- Version de PHP: 5.3.10-1ubuntu3.5

SET SQL_MODE="NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;

--
-- Base de données: `ePortfolio`
--
--
-- Contenu de la table `competence`
--
INSERT INTO `competence` (`id`, `categorie`, `nom`, `reference`, `version`) VALUES
(1, '-Situation obligatoire', 'Participation à un projet d''évolution d''un SI (Solution applicative et d''infrastructure portant prioritairement sur le domaine de spécialité du candidat)', 'A', 0),
(2, '-Situation obligatoire', 'Prise en charge d''incidents et de demandes d''assistance liés au domaine de spécialité du candidat', 'B', 0),
(3, '-Situation obligatoire', 'Elaboration de documents relatifs à la production et à la fourniture de services', 'C', 0),
(4, '-Situation obligatoire', 'Productions relatives à la mise en place d''un dispositif de veille technologique et à l''étude d''une technologie, d''un composant, d''un outil ou d''une méthode', 'D', 0),
(9, 'D1.1 - Analyse de la demande', 'Analyse du cahier des charges d''un service à produire', 'A1.1.1', 0),
(10, 'D1.1 - Analyse de la demande', 'Étude de l''impact de l''intégration d''un service sur le système informatique', 'A1.1.2', 0),
(11, 'D1.1 - Analyse de la demande', 'Étude des exigences liées à la qualité attendue d''un service', 'A1.1.3', 0),
(12, 'D1.2 - Choix d''une solution', 'Élaboration et présentation d''un dossier de choix de solution technique', 'A1.2.1 ', 0),
(13, 'D1.2 - Choix d''une solution', 'Rédaction des spécifications techniques de la solution retenue', 'A1.2.2', 0),
(14, 'D1.2 - Choix d''une solution', 'Évaluation des risques liés à l''utilisation d''un service ', 'A1.2.3', 0),
(15, 'D1.2 - Choix d''une solution', 'Détermination des tests nécessaires à la validation d''un service', 'A1.2.4', 0),
(16, 'D1.2 - Choix d''une solution', 'Définition des niveaux d''habilitation associés à un service ', 'A1.2.5', 0),
(17, 'D1.3 - Mise en production d’un service', 'Test d''intégration et d''acceptation d''un service ', 'A1.3.1 ', 0),
(18, 'D1.3 - Mise en production d’un service', 'Définition des éléments nécessaires à la continuité d''un service ', 'A1.3.2', 0),
(19, 'D1.3 - Mise en production d’un service', 'Accompagnement de la mise en place d''un nouveau service ', 'A1.3.3', 0),
(20, 'D1.3 - Mise en production d’un service', 'Déploiement d''un service ', 'A1.3.4', 0),
(21, 'D1.4 - Travail en mode projet', 'Participation à un projet ', 'A1.4.1 ', 0),
(22, 'D1.4 - Travail en mode projet', 'Évaluation des indicateurs de suivi d''un projet et justification des écarts ', 'A1.4.2', 0),
(23, 'D1.4 - Travail en mode projet', 'Gestion des ressources ', 'A1.4.3', 0),
(24, 'D2.1 - Exploitation des services', 'Accompagnement des utilisateurs dans la prise en main d''un service ', 'A2.1.1', 0),
(25, 'D2.1 - Exploitation des services', 'Évaluation et maintien de la qualité d''un service ', 'A2.1.2', 0),
(26, 'D2.2 - Gestion des incidents et des demandes d’assistance', 'Suivi et résolution d''incidents ', 'A2.2.1', 0),
(27, 'D2.2 - Gestion des incidents et des demandes d’assistance', 'Suivi et réponse à des demandes d''assistance ', 'A2.2.2', 0),
(28, 'D2.2 - Gestion des incidents et des demandes d’assistance', 'Réponse à une interruption de service ', 'A2.2.3', 0),
(29, 'D2.3 - Gestion des problèmes et des changements', 'Identification, qualification et évaluation d''un problème ', 'A2.3.1', 0),
(30, 'D2.3 - Gestion des problèmes et des changements', 'Proposition d''amélioration d''un service ', 'A2.3.2', 0),
(31, 'D3.2 - Installation d’une solution d’infrastructure', 'Installation et configuration d''éléments d''infrastructure ', 'A3.2.1', 0),
(32, 'D3.2 - Installation d’une solution d’infrastructure', 'Remplacement ou mise à jour d''éléments défectueux ou obsolètes', 'A3.2.2', 0),
(33, 'D4.1 - Conception et réalisation d’une solution applicative', 'Proposition d''une solution applicative ', 'A4.1.1', 0),
(34, 'D4.1 - Conception et réalisation d’une solution applicative', 'Conception ou adaptation de l''interface utilisateur d''une solution applicative ', 'A4.1.2', 0),
(35, 'D4.1 - Conception et réalisation d’une solution applicative', 'Conception ou adaptation d''une base de données ', 'A4.1.3', 0),
(36, 'D4.1 - Conception et réalisation d’une solution applicative', 'Définition des caractéristiques d''une solution applicative ', 'A4.1.4', 0),
(37, 'D4.1 - Conception et réalisation d’une solution applicative', 'Prototypage de composants logiciels ', 'A4.1.5', 0),
(38, 'D4.1 - Conception et réalisation d’une solution applicative', 'Gestion d''environnements de développement et de test', 'A4.1.6', 0),
(39, 'D4.1 - Conception et réalisation d’une solution applicative', 'Développement, utilisation ou adaptation de composants logiciels', 'A4.1.7', 0),
(40, 'D4.1 - Conception et réalisation d’une solution applicative', 'Réalisation des tests nécessaires à la validation d''éléments adaptés ou développés', 'A4.1.8', 0),
(41, 'D4.1 - Conception et réalisation d’une solution applicative', 'Rédaction d''une documentation technique', 'A4.1.9', 0),
(42, 'D4.1 - Conception et réalisation d’une solution applicative', 'Rédaction d''une documentation d''utilisation ', 'A4.1.10', 0),
(43, 'D4.2 - Maintenance d''une solution applicative', 'Analyse et correction d''un dysfonctionnement, d''un problème de qualité de service ou de sécurité', 'A4.2.1', 0),
(44, 'D4.2 - Maintenance d''une solution applicative', 'Adaptation d''une solution applicative aux évolutions de ses composants', 'A4.2.2', 0),
(45, 'D4.2 - Maintenance d''une solution applicative', 'Réalisation des tests nécessaires à la mise en production d''éléments mis à jour', 'A4.2.3', 0),
(46, 'D4.2 - Maintenance d''une solution applicative', 'Mise à jour d''une documentation technique', 'A4.2.4', 0),
(47, 'D5.1 - Gestion des configurations', 'Mise en place d''une gestion de configuration', 'A5.1.1', 0),
(48, 'D5.1 - Gestion des configurations', 'Recueil d''informations sur une configuration et ses éléments', 'A5.1.2', 0),
(49, 'D5.1 - Gestion des configurations', 'Suivi d''une configuration et de ses éléments', 'A5.1.3', 0),
(50, 'D5.1 - Gestion des configurations', 'Étude de propositions de contrat de service (client, fournisseur)', 'A5.1.4', 0),
(51, 'D5.1 - Gestion des configurations', 'Évaluation d''un élément de configuration ou d''une configuration', 'A5.1.5', 0),
(52, 'D5.1 - Gestion des configurations', 'Évaluation d''un investissement informatique', 'A5.1.6', 0),
(53, 'D5.2 - Gestion des compétences', 'Exploitation des référentiels, normes et standards adoptés par le prestataire', 'A5.2.1', 0),
(54, 'D5.2 - Gestion des compétences', 'Veille technologique', 'A5.2.2', 0),
(55, 'D5.2 - Gestion des compétences', 'Repérage des compléments de formation ou d''auto-formation', 'A5.2.3', 0),
(56, 'D5.2 - Gestion des compétences', ' Étude d''une technologie, d''un composant, d''un outil ou d''une méthode', 'A5.2.4', 0);
-- --------------------------------------------------------

--
-- Contenu de la table `situation_pro`
--

INSERT INTO `situation_pro` (`id`, `vignette`, `nom`, `version`) VALUES
(1, '<a href="../../resources/images/refactoring_tests_unitaires.png" target="_blank"><img style="display: block; margin: 0 auto;" src="../../resources/images/refactoring_tests_unitaires.png" alt="Refactoring tests unitaires"/></a>', 'Refactoring tests unitaires', 0),
(2, '<a href="../../resources/images/getap.png" target="_blank"><img style="display: block; margin: 0 auto; width: 60%" src="../../resources/images/getap.png" alt="Getap"/></a>', 'Intégration des tests unitaires', 0),
(3, '<a href="../../resources/images/ajax_log.jpg" target="_blank"><img style="display: block; margin: 0 auto;" src="../../resources/images/ajax_log.jpg" alt="Ajax"/></a>', 'Ajax : Premier pas', 0),
(4, '<a href="../../resources/images/tslap/page_suivi_admin.png" target="_blank"><img style="display: block; margin: 0 auto; width: 80%" src="../../resources/images/tslap/page_suivi_admin.png" alt="TSLAP"/></a>', 'Import de données : Fichier CSV', 0);



-- --------------------------------------------------------

--
-- Contenu de la table `article`
--

INSERT INTO `article` (`id`, `detail`, `version`) VALUES
(1, '<div style="text-align: center;"><strong>Membres :</strong><br/>\r\nNicolas BARROSO<br/>\r\nAntoine FIDALGO<br/>\r\nQuentin GEFFARD<br/>\r\nFlorian LAFOREST<br/>\r\n<a href="https://github.com/qgeffard/TPGetapTU">\r\n<strong>Lien vers le projet GitHub</strong></a></div>\r\n<h1>1/Contexte</h1>\r\n<h2>Le problème :</h2>\r\nL''application GeTAP initiée au cours du printemps 2011 entrera bientôt en phase de déploiement. Nous souhaitons que le code source exprime de façon plus claire, plus communicante, les différentes transitions responsables des changements d''état de l''objet central de cette application, à savoir les demandes de validation de consommation de temps d''accompagnement personnalisé (DVCTAP) représentées par la classe DemandeValidationConsoTempsAccPers.\r\n<h2>La plateforme de travail :</h2>\r\nPour les besoins de cette mission, un morceau de l''application a été extrait de son contexte technique (hors certaines dimensions techniques du web : pas de mvc, spring, tomcat, jsp...)\r\n<h2>Diagramme d''état transitions fourni :</h2>\r\n<img alt="Diagramme etat" src="http://img571.imageshack.us/img571/6226/img1w.png" /><br/>\r\n\r\nA partir de ce contexte et d''après le TP proposé nous avons commencé par établir un diagramme de classe de l''existant afin de mieux comprendre la logique de l''application.\r\n<h1>2/ Diagramme de classes UML de l''existant</h1>\r\n<img alt="Diagramme de classes" src="http://img801.imageshack.us/img801/4510/img2ej.png" /><br/>\r\n\r\nLa classe DemandeValidationConsoTempsAccPers est la classe représentant une demande de consommation de temps d''aide personnalisée. Cette classe est reliée à la classe User par une association 1-1 pour un User de type « prof » et par une même relation mais pour un User de type « eleve » car une demande de ce type a besoin de deux User pour être complète. Cette classe a aussi besoin d''un « AccPersonalise » d''où l''association de « DemandeValidationConsoTempsAccPers » vers « AccPersonalise ». Nous avons ensuite la classe User qui en plus de ses relations avec « DemandeValidationConsoTempsAccPers » possède des associations avec « Classe » et « Discipline » car un User de type « prof » aura besoin d''une discipline(discipline enseignée), et n''importe quel type de User appartient au moins à une classe.\r\n\r\nNous avons ensuite créé une classe Exemple qui nous a servi à tester les limites de l''existant.\r\n<h1>3/ Classe Exemple</h1>\r\nVoici la classe exemple attendu dans notre mission :<br/>\r\n\r\n<img alt="Code" src="http://img837.imageshack.us/img837/5407/img3ug.png" /><br/>\r\n\r\nUne fois la classe exemple créée on s''est aperçu que l''état pouvait être changé à n''importe quel moment et dans n''importe quelle situation : chose qui ne devrait pas être possible. Exemple, un élève ne devrait pas pouvoir modifier sa demande une fois que le prof y est lui-même apporté ses modifications. Nous avons donc créé toute une batterie de tests unitaires afin de comprendre et de pouvoir modifier en conséquence le code du programme.\r\n<h1>4/ TESTS UNITAIRES</h1>\r\nClasse de test :<br/>\r\n\r\n<img alt="Code" src="http://imageshack.us/a/img856/5021/img4jwk.png" /><br/>\r\n<img alt="Code" src="http://imageshack.us/a/img713/4822/img5y.png" />\r\n<h1>5/ JAVADOC</h1>\r\nPour finir nous avons commenté toutes les méthodes à la sauce JAVADOC. Pour cela nous sommes allés étudier cette méthode de commentaire sur le Site Du Zéro. Ci-dessous un exemple d''une de nos fonctions commentée façon JAVADOC.\r\n\r\n<img alt="Code" src="http://img6.imageshack.us/img6/756/img6s.png" /><br/>\r\n\r\nL''outil JAVADOC permet, en inspectant le code Java des classes, de produire une documentation très complète de l''application. Pour ce faire, il existe une multitude de TAGS permettant de commenter correctement ses méthodes : chacun permettant d''apporter des précisions sur la méthode. En voici un extrait :\r\n<ul>\r\n	<li>@return</li>\r\n	<li>@param</li>\r\n	<li>@throws</li>\r\n	<li>@author</li>\r\n	<li>@version</li>\r\n	<li>@see</li>\r\n	<li>@since</li>\r\n	<li>@serial</li>\r\n	<li>@deprecated</li>\r\n</ul>', 0),
(2, 'Objet : Intégration de travaux de maintenance préventive sur un projet\r\n<div style="text-align:center;"><strong>Équipe :</strong><br/>\r\nNicolas BARROSO<br/>\r\nAntoine FIDALGO<br/>\r\nQuentin GEFFARD<br/>\r\nFlorian LAFOREST</div>\r\n<h1>1/ Contexte</h1>\r\nNous sommes intervenus sur des éléments du projet GeTAP. Pour le bon déroulement des opérations précédentes, ces éléments ont été extraits de ce projet. Notre mission à consisté à intégrer notre travail dans le projet en place (<a href="contexte">voir contexte GeTAP</a>).\r\n\r\nCette intégration ne se fait jamais directement sur une application en production. Nous avons effectué ce travail à partir d’un fork du projet GeTAP dans sa version actuelle :<br/>\r\n<a title="prolog-getap" href="https://github.com/sio-melun/prolog-getap" target="_blank">https://github.com/sio-melun/prolog-getap</a>\r\n<h3>Le but de notre travail d’intégration :</h3>\r\nLa classe DVCTAP dispose maintenant de méthodes gérant le cycle de vie typique d’une instance DVCTAP. Actuellement l’application gère les changements d’états en modifiant la valeur de l’attribut etat d’une instance de DVCTAP directement via son setter ou d’autres méthodes spécifiques antérieures à notre travail. Il faut donc modifier ce comportement interne afin de passer dorénavant par les méthodes responsables des transitions, en intégrant en plus une gestion des exceptions.\r\n\r\n<a href="http://laforestflorian.files.wordpress.com/2013/01/getap.png"><img class="alignnone size-large wp-image-40" alt="getap" src="http://laforestflorian.files.wordpress.com/2013/01/getap.png?w=940" width="500" height="358" /></a><br/>\r\n<h1>2/ Démarche</h1>\r\n<h3>1. Phase d’intégration :</h3>\r\nNous avons commencé par remplacer le fichier « DemandeValidationConsoTempsAccPers.java » par celui créé dans le précédent projet (voir rapport sur le REFACTORING de GeTAP). Afin de s’assurer que l’application fonctionnait toujours nous avons également intégré les tests unitaires testant la classe que nous venions d’intégrée (images ci-dessous).<br/>\r\n\r\n<a href="http://laforestflorian.files.wordpress.com/2013/01/testintegration.png"><img class="alignnone size-large wp-image-41" alt="testintegration" src="http://laforestflorian.files.wordpress.com/2013/01/testintegration.png?w=940" width="600" height="161" /></a><br/>\r\n\r\nLes tests étant concluants, il a fallu adapter le comportement des autres activités de GeTAP se référençant à la classe « DemandeValidationConsoTempsAccPers.java » afin de pouvoir y intégrer les nouvelles méthodes (renommage).\r\n<h3>2. Modification pour les vues :</h3>\r\nCi-dessous, le remplacement de simples tests d’égalité de l’état par les méthodes appropriées (isser) ce qui rend le code beaucoup plus lisible et compréhensible pour le développeur. Cela nous a permis en priorité de ne plus travailler avec de simple valeur entière mais de gérer les différents état avec un masque de bits.<br/>\r\n\r\n<a href="http://laforestflorian.files.wordpress.com/2013/01/ti2.png"><img class="alignnone size-full wp-image-42" alt="ti2" src="http://laforestflorian.files.wordpress.com/2013/01/ti2.png" width="450" height="41" /></a><br/>\r\n\r\nVoici l’exemple de la fonction isModifieeEleve utilisée dans la vue précédente. C’est une méthode qui retourne un boolean créé par le test d’égalité entre 0 et la valeur retourné par l’opérateur &amp; sur l’état et la constante MODIFIEE_ELEVE. Ce qui permet de savoir si le bit voulu a été levé ou non.\r\n\r\n<span style="color:#950055;">public boolean</span> isModifieeEleve() {\r\n\r\n<span style="color:#950055;">return</span> (<span style="color:#950055;">this</span>.etat &amp; MODIFIEE_ELEVE) != 0;\r\n\r\n}\r\n<h3>3. Modification d’un controller :</h3>\r\n<a href="http://laforestflorian.files.wordpress.com/2013/01/ti3.png"><img class="alignnone size-full wp-image-43" alt="ti3" src="http://laforestflorian.files.wordpress.com/2013/01/ti3.png" width="600" height="110" /></a><br/>\r\n\r\nComme pour les getter/setter de l’exemple précédent, nous avons remplacé, dans les controllers, les mécanismes de comparaison de valeurs pour intégrer le système de masque de bit.\r\n<h3>4. Ajout des loggers :</h3>\r\nNous avons intégré, dans les attributs de la classe DVCTAP, un logger :\r\n\r\n<span style="color:#950055;">private final</span> Logger <span style="color:#2a00ff;">logger</span> = LoggerFactory.getLogger(DemandeValidationConsoTempsAccPers.<span style="color:#950055;">class</span>);\r\n\r\nIl nous a fallu rajouter dans le fichier « log4j.xml » un niveau remontant les informations sur ce logger. Le scope dans le « log4j.xml » permet d’affiner le renseignement des informations loggées.<br/><br/>\r\n\r\n<span style="color:#645fd3;">&lt;!– Application logger –&gt;</span>\r\n<p style="text-align:left;"><span style="color:#3f7f7f;">&lt;logger</span> <span style="color:#950055;">name</span>=<span style="color:#2a00ff;">"org.ldv.sio.getap.app"</span><span style="color:#3f7f7f;">&gt;</span><br/>\r\n<span style="color:#3f7f7f;">&lt;level</span> <span style="color:#950055;">value</span>=<span style="color:#2a00ff;">"info"</span> <span style="color:#3f7f7f;">/&gt;</span><br/>\r\n<span style="color:#3f7f7f;">&lt;/logger&gt;</span></p>\r\nNous avons pu ensuite ajouter à nos méthodes getter/setter des loggers nous permettant de vérifier le passage par la méthode concernée.\r\n\r\nDate dateLog = <span style="color:#950055;">new</span> Date();\r\n<span style="color:#2a00ff;">logger</span>.info(<span style="color:#2a00ff;">"\\n MODIFICATION PAR ELEVE : "</span> + dateLog + <span style="color:#2a00ff;">"\\n "</span>+ <span style="color:#950055;">this</span>.toString());\r\n<h1>3/ Conclusion</h1>\r\nLe système de masque binaire a donc été intégralement implémenté dans l’existant. Les tests unitaires ont accompagnés le bon déroulement de cette opération sans modifier le bon comportement initial de GeTAP. L’ajout des instructions de logs a permis de vérifier la prise en charge des méthodes intégrées dans l’existant.', 0),
(3, 'L’article suivant a été rédigé dans le cadre d’un projet d’application web codé en JAVA à l’aide de l’outil de développement Spring ROO qui s’appuie sur le Framework Spring.\r\n\r\nLe but de cette article va être de modifier la valeur d’un tableau sans avoir à recharger tout le tableau en rechargeant la page.\r\n<h2>Tout d’abord, Qu’est ce que l’AJAX ?</h2>\r\nLa définition est Asynchronous Javascript And Xml. Il ne s’agit donc pas d’une technologie en elle même, mais d’un concept permettant de faire des appels asynchrones au serveur depuis le client. Le serveur pourra retourner soit du Xml, du texte, du JSON … qui sera traité par le Javascript. Ce concept va nous permettre de modifier/ajouter des éléments sur la page en cour sans avoir à recharger celle-ci.\r\n<h2>Utilisation : l’objet XmlHttpRequest</h2>\r\nNous allons créer en Javascript un objet du type XmlHttpRequest (ou xhr) qui va nous permettre d’effectuer nos requêtes http et d’échanger du Xml avec le serveur<br/><br/>\r\n\r\n<a href="http://laforestflorian.files.wordpress.com/2013/01/img121.png"><img class="alignnone size-large wp-image-24" alt="img12" src="http://laforestflorian.files.wordpress.com/2013/01/img121.png?w=450" width="450" height="196" /></a><br/><br/>\r\n\r\nNous avons maintenant sous la main un objet XHR prêt à travailler pour nous. Celui-ci possède plusieurs méthodes et propriétés disponibles à cette adresse : <a href="http://siddh.developpez.com/articles/ajax" target="_blank">http://siddh.developpez.com/articles/ajax</a><br/><br/>\r\n\r\nNous créons maintenant notre propre fonction qui grâce à onreadystatechange sera appelée à chaque changement d’état de notre objet XHR. On appellera cette fonction “go()” . On lui passe plusieurs paramètres : “element” qui est de type text et qui nous permettra de définir un texte approprié dans la fenêtre d’alerte qui s’affichera, “value” qui correspond à la valeur actuelle de la cellule sélectionnée et “position” qui contient à la fois l’id de la ligne et le numéro de la colonne. Les deux données étant séparées par un tiret ( – ). Pour plus de clarté nous allons définir des constantes : CLIENT, NUM_CDE_ACHAT_ARISTOTE , … Ces constantes correspondent en fait à des colonnes ! Ainsi dans notre exemple nous avons une colonne Client, une colonne Fournisseur etc … et donc une colonne Numéro de Commande Achat Aristote. On sépare ensuite les données contenues dans “position” dans deux autres variables : “id” pour le numéro de ligne et “pos” pour le numéro de colonne. On définit enfin une variable “saisie” qui va contenir la nouvelle saisie de l’utilisateur.<br/><br/>\r\n\r\n<a href="http://laforestflorian.files.wordpress.com/2013/01/img8.png"><img class="alignnone size-large wp-image-25" alt="img8" src="http://laforestflorian.files.wordpress.com/2013/01/img8.png?w=450" width="450" height="115" /></a><br/><br/>\r\n\r\nOn attaque ensuite le coeur du système. On teste notre variable “pos” (qui correspond à une colonne je vous le rappel) et dans un premier temps nous allons vérifier si cette variable est égale à la constante CLIENT (si nous nous trouvons bien dans la colonne Client !). Je vous rappel que notre file rouge concerne une modification de valeur dans un tableau en AJAX par le biais d’une prompt ! Le cas de la colonne Client étant de type “select” je n’expliquerais pas ici ce cas. Comme notre variable “pos” ne correspond pas à la constante CLIENT nous passons alors dans le “else” (dans notre application nous traitons tous les cas autre que les alert de type prompt qui, elles, correspondent au else). Nous récupérons alors dans le else la valeur saisie par l’utilisateur par le biais de la fonction prompt() à laquelle on passe en paramètre un texte personnalisé (“element”) et la valeur de base de la cellule de notre tableau (“value”).<br/><br/>\r\n\r\n<a href="http://laforestflorian.files.wordpress.com/2013/01/img9.png"><img class="alignnone size-large wp-image-26" alt="img9" src="http://laforestflorian.files.wordpress.com/2013/01/img9.png?w=450" width="450" height="99" /></a><br/><br/>\r\n\r\nIl nous faut ensuite vérifier que la saisie de l’utilisateur n’est pas nulle. Nous instantion maintenant une variable de type XmlHttpRequest grâce à notre fonction getXhr() créée plus haut. On définit notre propre fonction qui sera appelée à chaque changement de l’état de notre objet grâce à la propriété onreadystatechange. Puis ensuite nous vérifions grâce aux propriétés vus plus haut si les données ont finit d’être chargées et si la réponse du serveur est ok. Les deux conditions suivante concernant CLIENT et FOURNISSEUR sont dans notre cas passé sans soucis puisque nous ne nous intéressons pas au cas de la colonne CLIENT et FOURNISSEUR. Comme ces conditions sont passées on met la réponse du serveur dans notre variable “saisie” grâce à la propriété responseText. On vérifie si notre variable “saisie” n’est pas nulle (si le serveur a retourné une réponse). Si elle n’est pas nulle alors on remplace la valeur du tableau par la réponse du serveur (la valeur entrée par l’utilisateur). Ceci clos notre fonction xhr.onreadystatechange function().<br/><br/>\r\n\r\n<a href="http://laforestflorian.files.wordpress.com/2013/01/img10.png"><img class="alignnone size-large wp-image-27" alt="img10" src="http://laforestflorian.files.wordpress.com/2013/01/img10.png?w=450" width="450" height="239" /></a><br/><br/>\r\n\r\nC’est maintenant que nous allons définir la requête à envoyer au serveur. Avec des conditions nous vérifions la valeur de “pos” afin de connaitre la colonne dans laquelle la valeur veut être changée. Dans notre cas la valeur à changer se trouve dans la colonne correspondant à la constante NUM_CDE_ACHAT_ARISTOTE. Dans ce cas nous ouvrons par le biais de notre objet XHR et par sa fonction open() une connexion avec le serveur. Il s’agit dans notre cas d’une requête de type POST, qui pointe vers la méthode d’action “changeNumCdeAchatAristote” (c’est elle qui va se charger de persister la nouvelle donnée en base) et qui sera asynchrone. On définit ensuite le header à envoyer avec notre requête grâce à la fonction setRequestHeader(). Il nous suffit enfin d’utiliser la fonction send() à laquelle on passe le numéro de la ligne et la nouvelle valeur a entrer dans le tableau pour que la requête soit envoyée et exécutée de manière asynchrone.<br/><br/>\r\n\r\n<a href="http://laforestflorian.files.wordpress.com/2013/01/img111.png"><img class="alignnone size-full wp-image-28" alt="img111" src="http://laforestflorian.files.wordpress.com/2013/01/img111.png" width="410" height="203" /></a><br/><br/>\r\n\r\n<h2>Conclusion :</h2>\r\n\r\nL’AJAX a été mis en place dans cet exemple. Il est donc maintenant possible de recharger une partie unique du tableau sans avoir à recharger toute la page. Ce projet m’a donc permis d’apprendre et de mettre en œuvre ce concept qui est professionnel et incontournable.', 0),
(4, '<h1>Le problème :</h1>\r\n<p>\r\n  Au cour du développement de l''application du tableau de suivi de livraison pour Atoll Palme (TSLAP pour les intimes), il a fallu initialiser la base de données à travers un fichier csv fourni et permettre cette option pour \r\n  l''administrateur du site au premier lancement du l''application.<br/>\r\n  Pour ce faire, il faut gérer plusieurs cas :\r\n  <ul>\r\n    <li>Avoir le bon nombres d''arguments sur une ligne</li>\r\n    <li>Ne pas insérer des lignes vides</li>\r\n    <li>Vérifier que les paramètres obligatoires sont renseignés</li>\r\n  </ul>\r\n</p>\r\n\r\n<h1>Récupérer le chemin du fichier</h1>\r\n<p>\r\n  Pour ce faire, il faut créer un fichier java ayant 2 attributs (nom du type String et file du type CommonsMultipartFile). La valeur de l''attribut file est le plus important, grâce à la méthode "getOriginalFilename", \r\n  on a le nom du fichier.<br/>\r\n  <img src="../../resources/images/tslap/formImport_file.png" alt="formImport_file.png"/><br/>\r\n  Le fichier sélectionné est sauvegardé dans le dossier temporaire du client d''où la ligne : <br/>\r\n  String filePath = System.getProperty("java.io.tmpdir") + File.separatorChar + form.getFile().getOriginalFilename();<br/>\r\n  <ul>\r\n    <li>System.getProperty("java.io.tmpdir") : chemin du dossier temporaire</li>\r\n    <li>File.separatorChar : Caractère de séparation dans un chemin</li>\r\n    <li>form.getFile().getOriginalFilename() : nom du fichier</li>\r\n  </ul>\r\n  On utilise un BufferedReader couplé à la méthode "getLigne" afin de gérer les 2 premiers cas énoncés plus haut.<br/>\r\n  <img src="../../resources/images/tslap/code_importCsv_lecture_file.png" alt="code_importCsv_lecture_file.png"/>\r\n</p>\r\n<p>\r\n  Côté code source, il est nécessaire de créer un formulaire avec en paramètre un type enctype="multipart/form-data" et un champs input de type file.<br/>\r\n  <img src="../../resources/images/tslap/code_form_importCsv.png" alt="code_form_importCsv.png"/><br/>\r\n  En voici l''aperçu initial :<br/>\r\n  <img src="../../resources/images/tslap/boite_dialog_import_csv.png" alt="boite_dialog_import_csv.png"/><br/>\r\n  Aperçu avec un fichier sélectionné : <br/>\r\n  <img src="../../resources/images/tslap/boite_dialog_import_csv_file_select.png" alt="boite_dialog_import_csv_file_select.png"/><br/>\r\n  Ensuite, pour permettre à l''administrateur de pouvoir sélectionner un fichier et d''utiliser le formulaire vu au-dessus, on a créé un bouton accessible uniquement à celui-ci.<br/>\r\n  <img src="../../resources/images/tslap/code_bouton_importCsv.png" alt="code_bouton_importCsv.png"/><br/>\r\n  L''ouverture du formulaire est possible grâce à une fonction jquery qui utilise la méthode dialog("open").<br/>\r\n  <img src="../../resources/images/tslap/code_js_boite_dialog_importCsv_part2.png" alt="code_js_boite_dialog_importCsv_part2.png"/><br/>\r\n  Cela permet d''utiliser la fonction dialog personnalisé. Celle-ci ouvre le formulaire vu au-dessus et créer 2 boutons (Envoyer et Annuler).<br/>\r\n  <img src="../../resources/images/tslap/code_js_boite_dialog_importCsv_part1.png" alt="code_js_boite_dialog_importCsv_part1.png"/><br/>\r\n  Lors du clique sur le bouton "Envoyer", cela ouvre une image de chargement qui reste visible le temps de l''import et envoi le formulaire sur la méthode "importCsv".<br/>\r\n  <img src="../../resources/images/tslap/code_affichage_boite_chargement.png" alt="code_affichage_boite_chargement.png"/><br/>\r\n  <img src="../../resources/images/tslap/chargement_import_csv.png" alt="chargement_import_csv.png"/><br/>\r\n</p>\r\n\r\n<h1>Insertion des données</h1>\r\n<p>\r\n  L''insertion complète des données s''effectue en plusieurs étapes : <br/>\r\n  <ul>\r\n    <li>Après récupération d''une ligne, on la sépare en tableau de String en effactuant un slit sur le ";"</li>\r\n    <li>Création des différents Objets avec les paramètres du fichier envoyé</li>\r\n    <li>Une fois le tout envoyés dans la base de données, on passe à la ligne suivante</li>\r\n  </ul>\r\n  <img src="../../resources/images/tslap/code_importCsv_create_etats&role.png" alt="code_importCsv_create_etats&role.png"/><br/>\r\n  <img src="../../resources/images/tslap/code_importCsv_insert_donnees_1.png" alt="code_importCsv_insert_donnees_1.png"/><br/>\r\n  <img src="../../resources/images/tslap/code_importCsv_insert_donnees_2.png" alt="code_importCsv_insert_donnees_2.png"/><br/>\r\n  <img src="../../resources/images/tslap/code_importCsv_insert_donnees_3.png" alt="code_importCsv_insert_donnees_3.png"/><br/>\r\n</p>', 0);

-- --------------------------------------------------------

--
-- Contenu de la table `activite_competences`
--

INSERT INTO `situation_pro_competences` (`situation_pro`, `competences`) VALUES
(1, 13),
(2, 14),
(2, 15),
(3, 19),
(3, 20),
(4, 26),
(4, 29);
--
-- Contraintes pour les tables exportées
--

--
-- Contraintes pour la table `activite_competences`
--
ALTER TABLE `situation_pro_competences`
  ADD CONSTRAINT `FK54CF12862607A102` FOREIGN KEY (`situation_pro`) REFERENCES `situation_pro` (`id`),
  ADD CONSTRAINT `FK54CF12866180219F` FOREIGN KEY (`competences`) REFERENCES `competence` (`id`);

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
