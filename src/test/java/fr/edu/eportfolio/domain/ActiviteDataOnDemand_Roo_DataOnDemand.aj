// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package fr.edu.eportfolio.domain;

import fr.edu.eportfolio.domain.Activite;
import fr.edu.eportfolio.domain.ActiviteDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect ActiviteDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ActiviteDataOnDemand: @Component;
    
    private Random ActiviteDataOnDemand.rnd = new SecureRandom();
    
    private List<Activite> ActiviteDataOnDemand.data;
    
    public Activite ActiviteDataOnDemand.getNewTransientActivite(int index) {
        Activite obj = new Activite();
        setNom(obj, index);
        setUrlDetail(obj, index);
        setVignette(obj, index);
        return obj;
    }
    
    public void ActiviteDataOnDemand.setNom(Activite obj, int index) {
        String nom = "nom_" + index;
        if (nom.length() > 30) {
            nom = nom.substring(0, 30);
        }
        obj.setNom(nom);
    }
    
    public void ActiviteDataOnDemand.setUrlDetail(Activite obj, int index) {
        String urlDetail = "urlDetail_" + index;
        if (urlDetail.length() > 30) {
            urlDetail = urlDetail.substring(0, 30);
        }
        obj.setUrlDetail(urlDetail);
    }
    
    public void ActiviteDataOnDemand.setVignette(Activite obj, int index) {
        String vignette = "vignette_" + index;
        if (vignette.length() > 30) {
            vignette = vignette.substring(0, 30);
        }
        obj.setVignette(vignette);
    }
    
    public Activite ActiviteDataOnDemand.getSpecificActivite(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Activite obj = data.get(index);
        Long id = obj.getId();
        return Activite.findActivite(id);
    }
    
    public Activite ActiviteDataOnDemand.getRandomActivite() {
        init();
        Activite obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Activite.findActivite(id);
    }
    
    public boolean ActiviteDataOnDemand.modifyActivite(Activite obj) {
        return false;
    }
    
    public void ActiviteDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Activite.findActiviteEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Activite' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Activite>();
        for (int i = 0; i < 10; i++) {
            Activite obj = getNewTransientActivite(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
