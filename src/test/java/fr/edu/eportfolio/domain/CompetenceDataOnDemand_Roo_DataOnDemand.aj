// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package fr.edu.eportfolio.domain;

import fr.edu.eportfolio.domain.Competence;
import fr.edu.eportfolio.domain.CompetenceDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect CompetenceDataOnDemand_Roo_DataOnDemand {
    
    declare @type: CompetenceDataOnDemand: @Component;
    
    private Random CompetenceDataOnDemand.rnd = new SecureRandom();
    
    private List<Competence> CompetenceDataOnDemand.data;
    
    public Competence CompetenceDataOnDemand.getNewTransientCompetence(int index) {
        Competence obj = new Competence();
        setCategori(obj, index);
        setNom(obj, index);
        setReference(obj, index);
        return obj;
    }
    
    public void CompetenceDataOnDemand.setCategori(Competence obj, int index) {
        String categori = "categori_" + index;
        if (categori.length() > 30) {
            categori = categori.substring(0, 30);
        }
        obj.setCategori(categori);
    }
    
    public void CompetenceDataOnDemand.setNom(Competence obj, int index) {
        String nom = "nom_" + index;
        if (nom.length() > 30) {
            nom = nom.substring(0, 30);
        }
        obj.setNom(nom);
    }
    
    public void CompetenceDataOnDemand.setReference(Competence obj, int index) {
        String reference = "reference_" + index;
        if (reference.length() > 30) {
            reference = reference.substring(0, 30);
        }
        obj.setReference(reference);
    }
    
    public Competence CompetenceDataOnDemand.getSpecificCompetence(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Competence obj = data.get(index);
        Long id = obj.getId();
        return Competence.findCompetence(id);
    }
    
    public Competence CompetenceDataOnDemand.getRandomCompetence() {
        init();
        Competence obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Competence.findCompetence(id);
    }
    
    public boolean CompetenceDataOnDemand.modifyCompetence(Competence obj) {
        return false;
    }
    
    public void CompetenceDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Competence.findCompetenceEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Competence' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Competence>();
        for (int i = 0; i < 10; i++) {
            Competence obj = getNewTransientCompetence(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
